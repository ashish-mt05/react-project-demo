<!-- 

State :

=> The state is a built-in React object that is used to contain data or information about the component. A componentâ€™s state can change over time; whenever it changes, the component re-renders. The change in state can happen as a response to user action or system-generated events and these changes determine the behavior of the component and how it will render.  

=> A state can be modified based on user action or network changes
=> Every time the state of an object changes, React re-renders the component to the browser
=> The state object is initialized in the constructor

  constructor(){
        this.state = {
           //initialize variable
           name : '',
        }

    }

=> The state object can store multiple properties

  constructor(){
        this.state = {
            fname :'',
            lname : '',
            email : ''
        }
    }

=> this.setState() is used to change or update the value of the state object

   this.setState({
            fname :'ashish',
            lname : 'kumar',
            email : 'ashish@gmail.com'
        })

=> setState() function performs a shallow merge between the new and the previous state

Ex:

export default class State extends Component {
  constructor() {
    super();
    //define state
    this.state = {
      name: "",
    };
  }
  updateName = (event)=>{
    this.setState({
     name : event.target.value
    })
  }
  render() {
    return (
      <React.Fragment>
        <h3>State Example in Class Component</h3>
        <input type='text' onChange={this.updateName}/>
        {/*after updating name in state print name */}
        <p>{this.state.name}</p>
      </React.Fragment>
    )
  }
} 

-->
